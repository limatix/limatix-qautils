#! /usr/bin/python
# usage: chx2pdf <basename.chx> <optional specimen> <optional perfby> <optional date> <optional dest>
# converts <basename.chx> to <basename>.texml to <basename>.tex to <basename>.pdf
# Output file is left in the current directory
# Intermediates are stored in /tmp

import sys
import subprocess
import os
import os.path
import shutil
import string


def main(argv=None):

    if argv is None:
        argv = sys.argv

    if len(sys.argv) < 2:
        print "usage: chx2pdf <chxfile.chx> <optional specimen> <optional perfby> <optional date> <optional dest>"
        print " "
        print "converts <chxfile.chx> to <chxfile>.pdf"
        print " "
        sys.exit(1)
        pass

    chxfile = sys.argv[1]


    if len(sys.argv) >= 3 and len(sys.argv[2]) > 0:
        specimen = sys.argv[2]
    else:
        specimen = None

    if len(sys.argv) >= 4 and len(sys.argv[3]) > 0:
        perfby = sys.argv[3]
    else:
        perfby = None

    if len(sys.argv) >= 5 and len(sys.argv[4]) > 0:
        date = sys.argv[4]
    else:
        date = None

    if len(sys.argv) >= 6 and len(sys.argv[5]) > 0:
        dest = sys.argv[5]
    else:
        dest = None

    chx2pdf(chxfile, specimen, perfby, date, dest)


def chx2pdf(chxfile, specimen=None, perfby=None, date=None, dest=None):

    scriptfile = os.path.realpath(__file__)
    scriptdir = os.path.dirname(scriptfile)
    libdir = os.path.join(scriptdir, '../lib')
    latexdir = os.path.join(scriptdir, '../latex')

    contextdir = os.path.abspath(os.curdir)  # current directory
    tmpdir = os.tempnam(None, "chx2pdf_")  # full path of temporary directory

    #chxfile = sys.argv[1]  # relative path from current directory to chx file
    chxfilename = os.path.basename(chxfile)  # name portion only
    chxdirname = os.path.dirname(os.path.abspath(chxfile))  # directory containing chx file
    basename = os.path.splitext(chxfilename)[0]  # name portion only, without extension
    chxtmpfile = os.path.join(tmpdir, chxfilename)  # path of chx file copy to be placed in temporary directory

    os.mkdir(tmpdir)
    shutil.copyfile(chxfile, chxtmpfile)

    # Configure latex ....

    # Set TEXMFHOME to include our latex directory
    os.environ["TEXMFHOME"] = "%s//" % (latexdir)

    # obtain value of TEXMF so we can substitute into TEXINPUTS  # see TEXINPUTS.pdflatex in /usr/share/texlive/texmf/web2c/texmf.cnf

    kpsewhich = subprocess.Popen(["kpsewhich", "--var-value", "TEXINPUTS.pdflatex"], stdout=subprocess.PIPE)
    (PDFLATEX_TEXINPUTS, junk) = kpsewhich.communicate()

    while PDFLATEX_TEXINPUTS[-1].isspace():
        PDFLATEX_TEXINPUTS = PDFLATEX_TEXINPUTS[0:-1]
        pass

    # Configure TEXINPUTS to include source directory and result of TEXMFHOME
    os.environ["TEXINPUTS"] = ".;%s;%s" % (chxdirname, PDFLATEX_TEXINPUTS)

    #print "TEXINPUTS=" + os.environ["TEXINPUTS"]

    xsltargs = ["xsltproc"]

    if specimen is not None:
        xsltargs.append("--stringparam")
        xsltargs.append("specimen")
        xsltargs.append(specimen)
        pass

    if perfby is not None:
        xsltargs.append("--stringparam")
        xsltargs.append("perfby")
        xsltargs.append(perfby)
        pass

    if date is not None:
        xsltargs.append("--stringparam")
        xsltargs.append("date")
        xsltargs.append(date)
        pass

    if dest is not None:
        xsltargs.append("--stringparam")
        xsltargs.append("dest")
        xsltargs.append(dest)
        pass

    xsltargs.append(os.path.join(libdir, "chx2texml.xsl"))
    xsltargs.append(chxfilename)
    os.chdir(tmpdir)
    try:
        fh = file(chxfile)  # make sure chx file readable
        fh.close()
        pass
    except:
        sys.stderr.write("Error reading input file %s ...\n" % (chxfile))
        raise

    texmlfile = basename+".texml"
    texmlfh = file(texmlfile, "w")
    subprocess.call(xsltargs, stdout=texmlfh)
    texmlfh.close()

    texfile = basename + ".tex"
    subprocess.call(["/usr/local/bin/texml", texmlfile, texfile])

    #print "TEXMFHOME=" + os.environ["TEXMFHOME"]
    pdffile = basename + ".pdf"
    subprocess.call(["pdflatex", "--shell-escape", texfile])
    # os.remove(os.path.join(tmpdir,basename+"-pics.pdf"))

    # subprocess.call(["pdflatex","--shell-escape",texfile])
    subprocess.call(["pdflatex", "--shell-escape", texfile])
    subprocess.call(["pdflatex", "--shell-escape", texfile])

    shutil.copyfile(pdffile, os.path.join(contextdir, pdffile))
    os.chdir(contextdir)

if __name__ == "__main__":
    sys.exit(main())
